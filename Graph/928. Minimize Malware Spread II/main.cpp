//
//  main.cpp
//  928. Minimize Malware Spread II
//
//  Created by 边俊林 on 2019/12/2.
//  Copyright © 2019 边俊林. All rights reserved.
//

#include <map>
#include <set>
#include <queue>
#include <string>
#include <stack>
#include <vector>
#include <cstdio>
#include <numeric>
#include <cstdlib>
#include <utility>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>

using namespace std;

/// Solution:
//
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int sz = graph.size();
        int res = 0, minn = INT_MAX;
        for (int init: initial) {
            queue<int> q;
            for (int tmpint: initial)
                if (tmpint != init) q.push(tmpint);
            vector<bool> vis (sz, false);
            vis[init] = true;
            int cnt = 0;
            while (q.size()) {
                int p = q.front(); q.pop();
                if (vis[p]) continue;
                vis[p] = true;
                ++cnt;
                for (int i = 0; i < sz; ++i)
                    if (i != p) q.push(i);
            }
            if (cnt < minn) {
                minn = cnt;
                res = init;
            }
        }
        return res;
    }
};

int main() {
    Solution sol = Solution();
    vector<vector<int>> g = {
//        {1,1,0},{1,1,0},{0,0,1}
//        {1,1,0},{1,1,1},{0,1,1}
//        {1,1,0,0},{1,1,1,0},{0,1,1,1},{0,0,1,1}
//        {1,1,1,0},{1,1,0,0},{1,0,1,0},{0,0,0,1}
    };
    vector<int> ini = {
//        0, 1
        3, 2
    };
    int res = sol.minMalwareSpread(g, ini);
    cout << res << endl;
    return 0;
}
